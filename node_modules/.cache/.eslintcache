[{"C:\\Users\\Admin\\Downloads\\karbonFx\\src\\index.tsx":"1","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\reportWebVitals.ts":"2","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\App.tsx":"3","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\utils.ts":"4","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\pages\\DeleteUser.tsx":"5","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\pages\\AddEditUser.tsx":"6","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\components\\UserCard.tsx":"7","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\components\\LabelledFormItem.tsx":"8"},{"size":554,"mtime":1695343843796,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1695343843871,"results":"11","hashOfConfig":"10"},{"size":5046,"mtime":1695345505518,"results":"12","hashOfConfig":"10"},{"size":1482,"mtime":1695343843830,"results":"13","hashOfConfig":"10"},{"size":1103,"mtime":1695343843989,"results":"14","hashOfConfig":"10"},{"size":5155,"mtime":1695343844000,"results":"15","hashOfConfig":"10"},{"size":2177,"mtime":1695343843974,"results":"16","hashOfConfig":"10"},{"size":2348,"mtime":1695343843962,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10yza55",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"C:\\Users\\Admin\\Downloads\\karbonFx\\src\\index.tsx",[],[],"C:\\Users\\Admin\\Downloads\\karbonFx\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Admin\\Downloads\\karbonFx\\src\\App.tsx",["46","47","48","49","50","51","52"],[],"import React, {useEffect, useState} from 'react';\nimport AddEditUser from \"./pages/AddEditUser\";\nimport {EditMode, User} from \"./types/user_types\";\nimport {Utils} from \"./utils\";\nimport DeleteUser from \"./pages/DeleteUser\";\nimport UserCard from \"./components/UserCard\";\n\nconst PAGE_SIZE = 6;\n\nfunction App() {\n    const [selectedUser, setSelectedUser] = useState<User | null>(null);\n    const [delUser, setDelUser] = useState<User | null>(null);\n    const [mode, setMode] = useState<EditMode>(null);\n    const [users, setUsers] = useState<User[]>([]);\n\n    useEffect(() => {\n        setUsers(Utils.retrieveUsers());\n    }, []);\n    const addUser = (user: User) => {\n        let tmp = [user, ...users];\n        setUsers(tmp);\n        Utils.storeUsers(tmp);\n    }\n\n\n    const updateUser = (user: User) => {\n        users.map((e, index) => {\n            if (e.timeAdded == user.timeAdded) users[index] = user\n        })\n        Utils.storeUsers(users);\n    }\n\n\n    const deleteUser = (user: User) => {\n        let filtered = users.filter((e) => (e.timeAdded != user.timeAdded));\n        setUsers(filtered);\n        Utils.storeUsers(filtered);\n    }\n\n    const closeUser = () => {\n        setMode(null);\n        setSelectedUser(null);\n    }\n\n    let rawPage = new URLSearchParams(window.location.search).get(\"page\") ?? \"1\";\n    let page = parseInt(rawPage);\n    let pages = Utils.getPages(users.length, PAGE_SIZE);\n\n    const pagedUsers = (page: number): User[] => {\n        let start = Utils.getStartEnd(page, PAGE_SIZE);\n        let items = users.slice(start[0], start[1]);\n        if (items.length > 0) {\n            return items;\n        }\n        return users.slice(0, PAGE_SIZE);\n    }\n    return (\n        <>\n            <div>\n                <header className=\"header flex flex-middle\">\n                    <div className={\"container\"}>\n                        <div className={\"in-h flex flex-middle\"}>\n                            <h2 className={\"flex-fill m-0\"}>User Inventory</h2>\n                            <button className={\"btn btn-avatar\"}>U</button>\n                        </div>\n                    </div>\n                </header>\n                <div className={\"container body\"}>\n                    <nav>\n                        <div className={\"flex flex-middle in\"}>\n                            <h2 className={\"flex-fill m-0\"}>List of users</h2>\n                            <button onClick={() => {\n                                setMode(\"add\");\n                            }} className={\"btn btn-success\"}>Add user\n                            </button>\n                        </div>\n                    </nav>\n                    <div className={\"in\"}>\n                        {users.length == 0 ? <div className={\"err-box\"}>\n                            <h1 className={\"icon-l m-0\"}>ðŸ˜”</h1>\n                            <h2 className={\"m-0\"}>It's lonely in here!</h2>\n                            <p className={\"m-0\"}>You have not added any users yet.</p>\n                        </div> : null}\n                        <div className={\"user-grid\"}>\n                            {pagedUsers(page).map((e) => (\n                                <UserCard key={e.timeAdded} user={e} onDelete={(e) => {\n                                    setDelUser(e!);\n                                }} onAction={(mode, e) => {\n                                    setMode(mode);\n                                    setSelectedUser(e);\n                                }}/>\n                            ))}\n                        </div>\n                    </div>\n                    {pages.length <= 1 ? null :\n                        <div className={\"in\"}>\n                            <div className={\"pagination flex flex-middle flex-end\"}>\n                                {pages.map((e) => {\n                                    let currentPage = page == (e + 1);\n                                    return (\n                                        <a key={\"page-\" + e}\n                                           className={currentPage ? \"active\" : \"\"}\n                                           href={currentPage ? 'javascript:void(0)' : \"?page=\" + (e + 1)}>{e + 1}</a>);\n                                })}\n                            </div>\n                        </div>\n                    }\n                </div>\n            </div>\n            {mode ?\n                <AddEditUser\n                    mode={mode} user={selectedUser} onClose={closeUser}\n                    onSubmit={(user, edited) => {\n                        if (edited) updateUser(user);\n                        else addUser(user);\n                        closeUser();\n                    }}/> : null}\n            {delUser ? <DeleteUser\n                user={delUser} onCancel={() => {\n                setDelUser(null);\n                closeUser();\n            }} onConfirm={(user) => {\n                setDelUser(null);\n                deleteUser(user!);\n                closeUser();\n            }\n            }/> : null}\n        </>\n    );\n}\n\nexport default App;\n","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\utils.ts",["53"],[],"import {User} from \"./types/user_types\";\n\nexport class Utils {\n    static getGender(v: string) {\n        return {\"m\": \"Male\", \"f\": \"Female\"}[v]\n    }\n\n    static getFood(v: string) {\n        return {\"burger\": \"Burger\", \"pizza\": \"Pizza\", \"pasta\": \"Pasta\"}[v]\n    }\n\n    static getColor(v: number) {\n        if (v < 25) return \"green\";\n        if (v < 50) return \"purple\";\n        return \"orange\";\n    }\n\n    static storeUsers(users: User[]) {\n        localStorage.setItem(\"users\", JSON.stringify(users));\n    }\n\n    static retrieveUsers(): User[] {\n        let data = localStorage.getItem(\"users\");\n        return data ? JSON.parse(data) : [];\n    }\n\n    static getPages(len: number, pageSize: number): Array<number> {\n        let p = Math.trunc(len / pageSize);\n        let rem = len % pageSize;\n        if (rem == 0) return this.generateList(p);\n        return this.generateList(p + 1);\n    }\n\n    private static generateList(len: number): Array<number> {\n        let lst = [];\n        for (let i = 0; i < len; i++) {\n            lst.push(i);\n        }\n        return lst;\n    }\n\n    static getStartEnd(page: number, size: number = 20): [number, number] {\n        let start = 0;\n        let end = size\n        if (page) {\n            let startPage = 1\n            try {\n                start = (page - startPage) * size\n                if (start < 0) start = 0\n                end = page * size\n            } catch (e) {\n\n            }\n        }\n        return [start, end]\n    }\n}","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\pages\\DeleteUser.tsx",[],[],"C:\\Users\\Admin\\Downloads\\karbonFx\\src\\pages\\AddEditUser.tsx",["54","55","56","57","58","59","60","61","62","63","64","65","66"],[],"import {useState} from \"react\";\nimport '../styles/app.scss';\nimport {LabelledInput, LabelledRadio, LabelledSelect} from \"../components/LabelledFormItem\";\nimport {AddUserParams, User} from \"../types/user_types\";\n\nconst AddEditUser = (params: AddUserParams) => {\n    const user = params.user\n    const [name, setName] = useState(user?.name ?? \"\");\n    const [err, setErr] = useState(\"\");\n    const [age, setAge] = useState(user?.age?.toString() ?? \"\");\n    const [dob, setDob] = useState(user?.dob ?? \"\");\n    const [gender, setGender] = useState(user?.gender ?? \"\");\n    const [food, setFood] = useState(user?.food ?? \"\");\n    const [hobbies, setHobbies] = useState(user?.hobbies ?? \"\");\n\n\n    const submit = (): User => {\n        console.log(!name, !age, !dob, !gender, !food, !hobbies);\n        if (!name || !age || !dob || !gender || !food || !hobbies) {\n            throw \"All fields are required!\"\n        }\n        let a = 0;\n        try {\n            a = parseInt(age)\n        } catch (e) {\n            throw \"Age must be numeric!\"\n        }\n        if (!Number.isInteger(a)) {\n            throw \"Age must be numeric.\"\n        }\n        if (a < 1 || a > 200) {\n            throw \"Invalid age range. Valid range 1 - 200!\"\n        }\n\n        return {\n            age: a,\n            dob: dob,\n            food: food,\n            gender: gender,\n            hobbies: hobbies,\n            name: name,\n            timeAdded: user?.timeAdded ?? new Date().getTime()\n        };\n    }\n    return (\n        <div onClick={params.onClose} className={\"dialog-wrapper\"}>\n            <div onClick={(event) => {\n                event.stopPropagation();\n            }} className={\"dialog\"}>\n                <div className={\"p-normal\"}>\n                    <h2 className={\"m-0\"}>Add User</h2>\n                    {err ? <div className={\"mt-20 alert alert-danger\"}>{err}</div> : null}\n                    <div className={\"user-form-grid mt-20\"}>\n                        <LabelledInput\n                            disabled={params.mode == \"view\"}\n                            defaultValue={name} label={\"Name\"}\n                            placeholder={\"Enter name\"} onInput={setName}/>\n                        <LabelledInput\n                            max={200}\n                            min={1}\n                            disabled={params.mode == \"view\"}\n                            defaultValue={age} type={\"number\"} label={\"Age\"}\n                            placeholder={\"Enter age\"} onInput={setAge}/>\n                        <LabelledInput\n                            max={new Date().toISOString().split(\"T\")[0]}\n                            disabled={params.mode == \"view\"}\n                            defaultValue={dob} type={\"date\"} label={\"Date of Birth\"}\n                            placeholder={\"Select date of birth\"} onInput={setDob}/>\n                        <LabelledRadio\n                            disabled={params.mode == \"view\"}\n                            defaultValue={gender} name={\"gender\"} label={\"Gender\"}\n                            items={[{label: \"Male\", value: \"m\"}, {label: \"Female\", value: \"f\"}]}\n                            onChange={setGender}/>\n                        <LabelledSelect\n                            disabled={params.mode == \"view\"}\n                            defaultValue={food} name={\"food\"} label={\"Favourite food\"}\n                            items={[\n                                {label: \"-- select --\", value: \"\"},\n                                {label: \"Pizza\", value: \"pizza\"},\n                                {label: \"Burger\", value: \"burger\"},\n                                {label: \"Pasta\", value: \"pasta\"}\n                            ]} onChange={setFood}/>\n                        <LabelledInput\n                            disabled={params.mode == \"view\"}\n                            defaultValue={hobbies} label={\"Hobbies\"}\n                            placeholder={\"Enter hobbies\"} lines={2} onInput={setHobbies}/>\n                    </div>\n                    <div className={\"flex flex-middle flex-end gap-normal mt-20\"}>\n                        <button onClick={params.onClose} className={\"btn btn-muted\"}>\n                            {params.mode == \"view\" ? \"Close\" : \"Cancel\"}\n                        </button>\n                        {params.mode == \"view\" ? null : params.mode == \"edit\" ? <button onClick={() => {\n                            try {\n                                params.onSubmit(submit(), true);\n                            } catch (e: any) {\n                                setErr(e);\n                            }\n                        }} className={\"btn btn-accent\"}>Update\n                        </button> : <button onClick={() => {\n                            try {\n                                params.onSubmit(submit());\n                            } catch (e: any) {\n                                setErr(e);\n                            }\n                        }} className={\"btn btn-success\"}>Add\n                        </button>}\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AddEditUser;","C:\\Users\\Admin\\Downloads\\karbonFx\\src\\components\\UserCard.tsx",[],[],"C:\\Users\\Admin\\Downloads\\karbonFx\\src\\components\\LabelledFormItem.tsx",["67"],[],"import {LabelledInputParams, LabelledSelectParams} from \"../types/input_types\";\n\nexport const LabelledInput = (params: LabelledInputParams) => {\n    return (\n        <div className={\"labelled-input\"}>\n            <label>{params.label}</label>\n            {params.lines && params.lines > 1 ?\n                <textarea disabled={params.disabled} value={params.defaultValue} rows={params.lines}\n                          placeholder={params.placeholder}\n                          onInput={(event) => params.onInput(event.currentTarget.value)}></textarea> :\n                <input disabled={params.disabled} value={params.defaultValue} type={params.type}\n                       placeholder={params.placeholder} max={params.max} min={params.min}\n                       onInput={(event) => params.onInput(event.currentTarget.value)}/>}\n\n        </div>\n    );\n}\n\nexport const LabelledRadio = (params: LabelledSelectParams) => {\n    return (\n        <div className={\"labelled-input\"}>\n            <label>{params.label}</label>\n            <div className={\"flex flex-middle gap-normal pv-small\"}>\n                {params.items.map((e, index) => (\n                    <div key={params.name + \"_\" + e.value}>\n                        <input disabled={params.disabled} id={\"input_\" + params.name + \"_\" + e.value}\n                               checked={params.defaultValue == e.value}\n                               type={\"radio\"} name={params.name}\n                               value={e.value}\n                               onChange={(event) => params.onChange(event.currentTarget.value)}/>\n                        <label htmlFor={\"input_\" + params.name + \"_\" + e.value}>{e.label}</label>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport const LabelledSelect = (params: LabelledSelectParams) => {\n    return (\n        <div className={\"labelled-input\"}>\n            <label>{params.label}</label>\n            <select disabled={params.disabled} value={params.defaultValue}\n                    onChange={(event) => params.onChange(event.currentTarget.value)}\n                    name={params.name}>\n                {params.items.map((e, index) => (\n                    <option key={params.name + \"_\" + e.value} value={e.value}>{e.label}</option>\n                ))}\n            </select>\n        </div>\n    );\n}\n",{"ruleId":"68","severity":1,"message":"69","line":27,"column":30,"nodeType":"70","messageId":"71","endLine":27,"endColumn":32},{"ruleId":"72","severity":1,"message":"73","line":28,"column":29,"nodeType":"74","messageId":"75","endLine":28,"endColumn":31},{"ruleId":"72","severity":1,"message":"76","line":35,"column":57,"nodeType":"74","messageId":"75","endLine":35,"endColumn":59},{"ruleId":"72","severity":1,"message":"73","line":79,"column":39,"nodeType":"74","messageId":"75","endLine":79,"endColumn":41},{"ruleId":"72","severity":1,"message":"73","line":99,"column":60,"nodeType":"74","messageId":"75","endLine":99,"endColumn":62},{"ruleId":"77","severity":1,"message":"78","line":101,"column":41,"nodeType":"79","endLine":103,"endColumn":107},{"ruleId":"80","severity":1,"message":"81","line":103,"column":64,"nodeType":"82","messageId":"83","endLine":103,"endColumn":84},{"ruleId":"72","severity":1,"message":"73","line":30,"column":17,"nodeType":"74","messageId":"75","endLine":30,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":20,"column":13,"nodeType":"86","messageId":"87","endLine":20,"endColumn":45},{"ruleId":"84","severity":1,"message":"85","line":26,"column":13,"nodeType":"86","messageId":"87","endLine":26,"endColumn":41},{"ruleId":"84","severity":1,"message":"85","line":29,"column":13,"nodeType":"86","messageId":"87","endLine":29,"endColumn":41},{"ruleId":"84","severity":1,"message":"85","line":32,"column":13,"nodeType":"86","messageId":"87","endLine":32,"endColumn":60},{"ruleId":"72","severity":1,"message":"73","line":55,"column":51,"nodeType":"74","messageId":"75","endLine":55,"endColumn":53},{"ruleId":"72","severity":1,"message":"73","line":61,"column":51,"nodeType":"74","messageId":"75","endLine":61,"endColumn":53},{"ruleId":"72","severity":1,"message":"73","line":66,"column":51,"nodeType":"74","messageId":"75","endLine":66,"endColumn":53},{"ruleId":"72","severity":1,"message":"73","line":70,"column":51,"nodeType":"74","messageId":"75","endLine":70,"endColumn":53},{"ruleId":"72","severity":1,"message":"73","line":75,"column":51,"nodeType":"74","messageId":"75","endLine":75,"endColumn":53},{"ruleId":"72","severity":1,"message":"73","line":84,"column":51,"nodeType":"74","messageId":"75","endLine":84,"endColumn":53},{"ruleId":"72","severity":1,"message":"73","line":90,"column":42,"nodeType":"74","messageId":"75","endLine":90,"endColumn":44},{"ruleId":"72","severity":1,"message":"73","line":92,"column":38,"nodeType":"74","messageId":"75","endLine":92,"endColumn":40},{"ruleId":"72","severity":1,"message":"73","line":92,"column":69,"nodeType":"74","messageId":"75","endLine":92,"endColumn":71},{"ruleId":"72","severity":1,"message":"73","line":27,"column":61,"nodeType":"74","messageId":"75","endLine":27,"endColumn":63},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object"]